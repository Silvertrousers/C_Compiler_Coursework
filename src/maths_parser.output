Nonterminals useless in grammar

   EXPR


Terminals unused in grammar

   T_CHAR
   T_DOUBLE
   T_ELSE
   T_FLOAT
   T_FOR
   T_IF
   T_INT
   T_LONG
   T_RETURN
   T_WHILE
   T_TIMES
   T_DIVIDE
   T_PLUS
   T_MINUS
   T_EXPONENT
   T_LESS_THAN
   T_GREATER_THAN
   T_EQUALS
   T_AND
   T_OR
   T_BITWISE_NOT
   T_LOGICAL_NOT
   T_MODULO
   T_COMMA
   T_DOT
   T_COLON
   T_SEMICOLON
   T_QUESTION
   T_LBRACKET
   T_RBRACKET
   T_LSQ_BRACKET
   T_RSQ_BRACKET


Grammar

    0 $accept: ROOT $end

    1 ROOT: PRIMARY_EXPRESSION
    2     | PRIMARY_EXPRESSION ROOT

    3 PRIMARY_EXPRESSION: T_IDENTIFIER
    4                   | CONSTANT
    5                   | T_STRING

    6 CONSTANT: T_DEC_INT
    7         | T_OCTAL_INT


Terminals, with rules where they appear

$end (0) 0
error (256)
T_CHAR (258)
T_DOUBLE (259)
T_ELSE (260)
T_FLOAT (261)
T_FOR (262)
T_IF (263)
T_INT (264)
T_LONG (265)
T_RETURN (266)
T_WHILE (267)
T_TIMES (268)
T_DIVIDE (269)
T_PLUS (270)
T_MINUS (271)
T_EXPONENT (272)
T_LESS_THAN (273)
T_GREATER_THAN (274)
T_EQUALS (275)
T_AND (276)
T_OR (277)
T_BITWISE_NOT (278)
T_LOGICAL_NOT (279)
T_MODULO (280)
T_COMMA (281)
T_DOT (282)
T_COLON (283)
T_SEMICOLON (284)
T_QUESTION (285)
T_LBRACKET (286)
T_RBRACKET (287)
T_LSQ_BRACKET (288)
T_RSQ_BRACKET (289)
T_DEC_INT (290) 6
T_OCTAL_INT (291) 7
T_IDENTIFIER (292) 3
T_STRING (293) 5


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
ROOT (40)
    on left: 1 2, on right: 0 2
PRIMARY_EXPRESSION (41)
    on left: 3 4 5, on right: 1 2
CONSTANT (42)
    on left: 6 7, on right: 4


State 0

    0 $accept: . ROOT $end

    T_DEC_INT     shift, and go to state 1
    T_OCTAL_INT   shift, and go to state 2
    T_IDENTIFIER  shift, and go to state 3
    T_STRING      shift, and go to state 4

    ROOT                go to state 5
    PRIMARY_EXPRESSION  go to state 6
    CONSTANT            go to state 7


State 1

    6 CONSTANT: T_DEC_INT .

    $default  reduce using rule 6 (CONSTANT)


State 2

    7 CONSTANT: T_OCTAL_INT .

    $default  reduce using rule 7 (CONSTANT)


State 3

    3 PRIMARY_EXPRESSION: T_IDENTIFIER .

    $default  reduce using rule 3 (PRIMARY_EXPRESSION)


State 4

    5 PRIMARY_EXPRESSION: T_STRING .

    $default  reduce using rule 5 (PRIMARY_EXPRESSION)


State 5

    0 $accept: ROOT . $end

    $end  shift, and go to state 8


State 6

    1 ROOT: PRIMARY_EXPRESSION .
    2     | PRIMARY_EXPRESSION . ROOT

    T_DEC_INT     shift, and go to state 1
    T_OCTAL_INT   shift, and go to state 2
    T_IDENTIFIER  shift, and go to state 3
    T_STRING      shift, and go to state 4

    $default  reduce using rule 1 (ROOT)

    ROOT                go to state 9
    PRIMARY_EXPRESSION  go to state 6
    CONSTANT            go to state 7


State 7

    4 PRIMARY_EXPRESSION: CONSTANT .

    $default  reduce using rule 4 (PRIMARY_EXPRESSION)


State 8

    0 $accept: ROOT $end .

    $default  accept


State 9

    2 ROOT: PRIMARY_EXPRESSION ROOT .

    $default  reduce using rule 2 (ROOT)
